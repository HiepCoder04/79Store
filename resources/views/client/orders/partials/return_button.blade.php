@php
  $canReturn = $order->delivered_at && now()->lte(\Carbon\Carbon::parse($order->delivered_at)->addDays(7));
@endphp

@if($canReturn)
<button class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#returnModal">
  Y√™u c·∫ßu tr·∫£ h√†ng
</button>
@endif

<div class="modal fade" id="returnModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <form class="modal-content" method="POST"
          action="{{ route('client.orders.returns.store', $order) }}"
          enctype="multipart/form-data">
      @csrf
      
      <!-- ‚úÖ TH√äM HIDDEN INPUTs cho s·ªë l∆∞·ª£ng ri√™ng -->
      <input type="hidden" name="quantity" id="total-quantity" value="0">
      <input type="hidden" name="plant_quantity" id="plant-quantity-hidden" value="0">
      <input type="hidden" name="pot_quantity" id="pot-quantity-hidden" value="0">
      
      <div class="modal-header"><h5 class="modal-title">T·∫°o y√™u c·∫ßu tr·∫£ h√†ng</h5></div>
      <div class="modal-body">
        <!-- Gi·ªØ nguy√™n ph·∫ßn UI c≈© -->
        <div class="mb-3">
          <label class="form-label">S·∫£n ph·∫©m trong ƒë∆°n</label>
          <select name="order_detail_id" class="form-select" required>
            @foreach($order->orderDetails as $d)
              @php 
                $remainingPlant = $d->remainingPlantQty(); // ‚úÖ ƒê√£ t√≠nh c·∫£ pending
                $remainingPot = $d->remainingPotQty();     // ‚úÖ ƒê√£ t√≠nh c·∫£ pending
                $hasAnythingToReturn = $remainingPlant > 0 || $remainingPot > 0;
                
                // ‚úÖ TH√äM th√¥ng tin pending ƒë·ªÉ user hi·ªÉu
                $pendingPlant = $d->plantQtyReturned() - $d->plantQtyActuallyReturned();
                $pendingPot = $d->potQtyReturned() - $d->potQtyActuallyReturned();
              @endphp
              @if($hasAnythingToReturn)
                <option value="{{ $d->id }}" 
                        data-product-price="{{ $d->product_price ?? 0 }}"
                        data-pot-price="{{ $d->pot_price ?? 0 }}"
                        data-has-pot="{{ ($d->pot_price ?? 0) > 0 ? 'true' : 'false' }}"
                        data-remaining-plant="{{ $remainingPlant }}"
                        data-remaining-pot="{{ $remainingPot }}">
                  #{{ $d->id }} ‚Äî {{ $d->product_name ?? $d->product->name }}
                  @if($pendingPlant > 0 || $pendingPot > 0)
                    <br>‚è≥ ƒêang ch·ªù duy·ªát: 
                    @if($pendingPlant > 0) {{ $pendingPlant }} c√¢y @endif
                    @if($pendingPot > 0) {{ $pendingPot }} ch·∫≠u @endif
                  @endif
                  <br>(C√≥ th·ªÉ tr·∫£: {{ $remainingPlant }} c√¢y, {{ $remainingPot }} ch·∫≠u)
                </option>
              @endif
            @endforeach
          </select>
          
        </div>

        <!-- ‚úÖ Gi·ªØ nguy√™n UI c√¢y/ch·∫≠u -->
        <div class="mb-3" id="return-type-section">
          <label class="form-label">B·∫°n mu·ªën tr·∫£ g√¨? <span class="text-danger">*</span></label>
          
          <!-- Tr·∫£ c√¢y -->
          <div class="card mb-2">
            <div class="card-body py-2">
              <div class="row align-items-center">
                <div class="col-2">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="return-plant-check" name="return_items[]" value="plant">
                    <label class="form-check-label fw-bold" for="return-plant-check">üå± C√¢y</label>
                  </div>
                </div>
                <div class="col-4">
                  <div class="input-group input-group-sm">
                    <span class="input-group-text">S·ªë l∆∞·ª£ng</span>
                    <!-- ‚úÖ B·ªé name attribute, ch·ªâ d√πng ƒë·ªÉ hi·ªÉn th·ªã -->
                    <input type="number" class="form-control" id="plant-quantity" 
                           min="0" max="10" value="0" disabled>
                  </div>
                </div>
                <div class="col-6">
                  <small class="text-muted">
                    Gi√°: <span id="plant-unit-price">0ƒë</span>/c√¢y
                    ‚Üí T·ªïng: <span id="plant-total-price" class="fw-bold text-success">0ƒë</span>
                  </small>
                </div>
              </div>
            </div>
          </div>

          <!-- Tr·∫£ ch·∫≠u -->
          <div class="card mb-2" id="pot-section">
            <div class="card-body py-2">
              <div class="row align-items-center">
                <div class="col-2">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="return-pot-check" name="return_items[]" value="pot">
                    <label class="form-check-label fw-bold" for="return-pot-check">ü™¥ Ch·∫≠u</label>
                  </div>
                </div>
                <div class="col-4">
                  <div class="input-group input-group-sm">
                    <span class="input-group-text">S·ªë l∆∞·ª£ng</span>
                    <!-- ‚úÖ B·ªé name attribute, ch·ªâ d√πng ƒë·ªÉ hi·ªÉn th·ªã -->
                    <input type="number" class="form-control" id="pot-quantity" 
                           min="0" max="10" value="0" disabled>
                  </div>
                </div>
                <div class="col-6">
                  <small class="text-muted">
                    Gi√°: <span id="pot-unit-price">0ƒë</span>/ch·∫≠u
                    ‚Üí T·ªïng: <span id="pot-total-price" class="fw-bold text-success">0ƒë</span>
                  </small>
                </div>
              </div>
            </div>
          </div>

          <!-- Th√¥ng b√°o kh√¥ng c√≥ ch·∫≠u -->
          <div id="no-pot-alert" class="alert alert-info py-2" style="display: none;">
            <small><i class="fas fa-info-circle"></i> S·∫£n ph·∫©m n√†y kh√¥ng c√≥ ch·∫≠u, ch·ªâ c√≥ th·ªÉ tr·∫£ c√¢y.</small>
          </div>

          <!-- T·ªïng ho√†n ti·ªÅn -->
          <div class="card bg-light">
            <div class="card-body py-2">
              <div class="row align-items-center">
                <div class="col-8">
                  <strong>üí∞ T·ªïng gi√° tr·ªã ho√†n ti·ªÅn ∆∞·ªõc t√≠nh:</strong>
                </div>
                <div class="col-4 text-end">
                  <h5 class="mb-0 text-primary" id="total-refund-amount">0ƒë</h5>
                </div>
              </div>
              <div class="mt-1">
                <small class="text-muted" id="refund-breakdown"></small>
              </div>
            </div>
          </div>

          <!-- Quick buttons -->
          <div class="mt-2">
            <button type="button" class="btn btn-sm btn-outline-secondary me-1" onclick="selectAllItems()">
              Ch·ªçn t·∫•t c·∫£
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary me-1" onclick="selectOnlyPlant()">
              Ch·ªâ c√¢y
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="selectOnlyPot()" id="only-pot-btn">
              Ch·ªâ ch·∫≠u
            </button>
          </div>
        </div>

        <!-- ‚úÖ Gi·ªØ nguy√™n c√°c field kh√°c -->
        <div class="mb-3">
          <label class="form-label">L√Ω do <span class="text-danger">*</span></label>
          <textarea name="reason" class="form-control" rows="3" 
                    placeholder="VD: C√¢y b·ªã h√©o, ch·∫≠u b·ªã v·ª°, kh√¥ng ƒë√∫ng m√¥ t·∫£..." 
                    required minlength="3" maxlength="500"></textarea>
          <small class="text-muted">C√≤n <span id="reason-count">500</span> k√Ω t·ª±</small>
        </div>

        <div class="mb-3">
          <label class="form-label">·∫¢nh minh h·ªça (t·ªëi ƒëa 5 ·∫£nh, m·ªói ·∫£nh ‚â§5MB)</label>
          <input type="file" name="images[]" multiple accept="image/jpeg,image/jpg,image/png,image/webp" 
                 class="form-control" id="images-input">
          <small class="text-muted">ƒê·ªãnh d·∫°ng: JPG, JPEG, PNG, WEBP</small>
        </div>

        <!-- Ng√¢n h√†ng -->
        <div class="mb-3">
          <label class="form-label">Ng√¢n h√†ng <span class="text-danger">*</span></label>
          <select name="bank_name" class="form-select" required id="bank-select">
            <option value="">ƒêang t·∫£i danh s√°ch ng√¢n h√†ng...</option>
          </select>
          <div class="text-center mt-2" id="bank-loading" style="display: none;">
            <div class="spinner-border spinner-border-sm" role="status"></div>
            <small class="text-muted ms-2">ƒêang t·∫£i...</small>
          </div>
        </div>

        <div class="mb-3">
          <label class="form-label">Ch·ªß t√†i kho·∫£n <span class="text-danger">*</span></label>
          <input type="text" name="bank_account_name" class="form-control" 
                 placeholder="H·ªç t√™n ch·ªß t√†i kho·∫£n" 
                 required minlength="3" maxlength="150">
        </div>
        <div class="mb-3">
          <label class="form-label">S·ªë t√†i kho·∫£n <span class="text-danger">*</span></label>
          <input type="text" name="bank_account_number" class="form-control" 
                 placeholder="Nh·∫≠p s·ªë t√†i kho·∫£n ng√¢n h√†ng" 
                 required minlength="8" maxlength="50" pattern="[0-9\s\-]+">
          <small class="text-muted">Ch·ªâ ƒë∆∞·ª£c nh·∫≠p s·ªë, d·∫•u g·∫°ch ngang v√† kho·∫£ng tr·∫Øng</small>
        </div>

        <!-- ‚úÖ TH√äM PH·∫¶N ƒêI·ªÄU KHO·∫¢N ƒê·ªîI TR·∫¢ -->
        <hr class="my-4">
        <div class="mb-3">
          <h6 class="fw-bold text-primary"><i class="fas fa-file-contract"></i> ƒêi·ªÅu kho·∫£n ƒë·ªïi tr·∫£ h√†ng</h6>
          
          <div class="card">
            <div class="card-body p-3" style="max-height: 200px; overflow-y: auto; background-color: #f8f9fa;">
              <div class="small text-dark">
                <p class="mb-2"><strong>üïê Th·ªùi h·∫°n:</strong> Ch·ªâ ch·∫•p nh·∫≠n ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng.</p>
                
                <p class="mb-2"><strong>üì¶ ƒêi·ªÅu ki·ªán s·∫£n ph·∫©m:</strong></p>
                <ul class="mb-2 ps-3">
                  <li>C√¢y c√≤n nguy√™n v·∫πn, ch∆∞a b·ªã h√©o √∫a do chƒÉm s√≥c kh√¥ng ƒë√∫ng c√°ch</li>
                  <li>Ch·∫≠u kh√¥ng b·ªã v·ª°, n·ª©t do t√°c ƒë·ªông b√™n ngo√†i</li>
                  <li>C√≤n ƒë·∫ßy ƒë·ªß ph·ª• ki·ªán ƒëi k√®m (n·∫øu c√≥)</li>
                </ul>

                <p class="mb-2"><strong>‚úÖ Tr∆∞·ªùng h·ª£p ƒë∆∞·ª£c ch·∫•p nh·∫≠n:</strong></p>
                <ul class="mb-2 ps-3">
                  <li>S·∫£n ph·∫©m b·ªã l·ªói t·ª´ nh√† s·∫£n xu·∫•t</li>
                  <li>Giao sai s·∫£n ph·∫©m so v·ªõi ƒë∆°n h√†ng</li>
                  <li>S·∫£n ph·∫©m b·ªã h∆∞ h·ªèng trong qu√° tr√¨nh v·∫≠n chuy·ªÉn</li>
                  <li>C√¢y kh√¥ng ƒë√∫ng m√¥ t·∫£ tr√™n website</li>
                </ul>

                <p class="mb-2"><strong>‚ùå Tr∆∞·ªùng h·ª£p KH√îNG ƒë∆∞·ª£c ch·∫•p nh·∫≠n:</strong></p>
                <ul class="mb-2 ps-3">
                  <li>C√¢y h√©o, ch·∫øt do chƒÉm s√≥c kh√¥ng ƒë√∫ng c√°ch</li>
                  <li>Ch·∫≠u b·ªã v·ª° do va ƒë·∫≠p sau khi nh·∫≠n h√†ng</li>
                  <li>Thay ƒë·ªïi √Ω ƒë·ªãnh mua h√†ng kh√¥ng c√≥ l√Ω do ch√≠nh ƒë√°ng</li>
                  <li>S·∫£n ph·∫©m ƒë√£ s·ª≠ d·ª•ng qu√° 24 gi·ªù</li>
                </ul>

                <p class="mb-2"><strong>üí∞ Ho√†n ti·ªÅn:</strong></p>
                <ul class="mb-2 ps-3">
                  <li>Ho√†n 100% gi√° tr·ªã s·∫£n ph·∫©m n·∫øu l·ªói t·ª´ shop</li>
                  <li>Th·ªùi gian x·ª≠ l√Ω: 3-7 ng√†y l√†m vi·ªác sau khi duy·ªát</li>
                  <li>Ph√≠ v·∫≠n chuy·ªÉn tr·∫£ h√†ng do kh√°ch h√†ng chi tr·∫£ (tr·ª´ tr∆∞·ªùng h·ª£p l·ªói t·ª´ shop)</li>
                </ul>

                <p class="mb-2"><strong>üìã Quy tr√¨nh:</strong></p>
                <ol class="mb-0 ps-3">
                  <li>Kh√°ch h√†ng g·ª≠i y√™u c·∫ßu ƒë·ªïi tr·∫£ qua website</li>
                  <li>79Store xem x√©t v√† ph·∫£n h·ªìi trong 24 gi·ªù</li>
                  <li>N·∫øu ƒë∆∞·ª£c duy·ªát, kh√°ch h√†ng g·ª≠i h√†ng v·ªÅ theo ƒë·ªãa ch·ªâ shop cung c·∫•p</li>
                  <li>Shop ki·ªÉm tra h√†ng v√† th·ª±c hi·ªán ho√†n ti·ªÅn</li>
                </ol>
              </div>
            </div>
          </div>

          <div class="form-check mt-3">
            <input class="form-check-input" type="checkbox" id="agree-terms" name="agree_terms" required>
            <label class="form-check-label" for="agree-terms">
              <strong>T√¥i ƒë√£ ƒë·ªçc, hi·ªÉu v√† ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n ƒë·ªïi tr·∫£ h√†ng c·ªßa 79Store</strong> <span class="text-danger">*</span>
            </label>
          </div>
          
          <div class="alert alert-warning mt-2 py-2">
            <small><i class="fas fa-exclamation-triangle"></i> 
              <strong>L∆∞u √Ω:</strong> Vi·ªác g·ª≠i y√™u c·∫ßu kh√¥ng ƒë·ªìng nghƒ©a v·ªõi vi·ªác t·ª± ƒë·ªông ƒë∆∞·ª£c ch·∫•p nh·∫≠n. 
              79Store s·∫Ω xem x√©t t·ª´ng tr∆∞·ªùng h·ª£p c·ª• th·ªÉ v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.
            </small>
          </div>
        </div>
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">H·ªßy</button>
        <button type="submit" class="btn btn-danger" id="submit-btn" disabled>G·ª≠i y√™u c·∫ßu</button>
      </div>

    </form>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const productSelect = document.querySelector('select[name="order_detail_id"]');
    const totalQuantityInput = document.querySelector('#total-quantity'); // ‚úÖ Hidden input
    
    const plantCheck = document.querySelector('#return-plant-check');
    const potCheck = document.querySelector('#return-pot-check');
    const plantQuantityInput = document.querySelector('#plant-quantity');
    const potQuantityInput = document.querySelector('#pot-quantity');
    
    const plantUnitPrice = document.querySelector('#plant-unit-price');
    const potUnitPrice = document.querySelector('#pot-unit-price');
    const plantTotalPrice = document.querySelector('#plant-total-price');
    const potTotalPrice = document.querySelector('#pot-total-price');
    const totalRefundAmount = document.querySelector('#total-refund-amount');
    const refundBreakdown = document.querySelector('#refund-breakdown');
    
    const potSection = document.querySelector('#pot-section');
    const noPotAlert = document.querySelector('#no-pot-alert');
    const onlyPotBtn = document.querySelector('#only-pot-btn');
    const submitBtn = document.querySelector('#submit-btn');
    
    const reasonTextarea = document.querySelector('textarea[name="reason"]');
    const reasonCount = document.querySelector('#reason-count');
    const imagesInput = document.querySelector('#images-input');
    const bankNumberInput = document.querySelector('input[name="bank_account_number"]');
    const bankSelect = document.querySelector('#bank-select');
    const bankLoading = document.querySelector('#bank-loading');

    let currentProductPrice = 0;
    let currentPotPrice = 0;
    let maxPlantQuantity = 0; // ‚úÖ T√°ch ri√™ng
    let maxPotQuantity = 0;   // ‚úÖ T√°ch ri√™ng
    let hasPot = false;

    // ‚úÖ Load banks (gi·ªØ nguy√™n)
    async function loadBankList() {
        try {
            bankLoading.style.display = 'block';
            bankSelect.innerHTML = '<option value="">ƒêang t·∫£i...</option>';
            
            const response = await fetch('https://api.vietqr.io/v2/banks');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.code === '00' && result.data) {
                bankSelect.innerHTML = '<option value="">-- Ch·ªçn ng√¢n h√†ng --</option>';
                
                const popularBanks = ['VCB', 'TCB', 'BIDV', 'VTB', 'CTG', 'MBB', 'ACB', 'TPB', 'STB', 'HDB'];
                const bankData = result.data;
                
                const sortedBanks = bankData.sort((a, b) => {
                    const aIsPopular = popularBanks.includes(a.bin);
                    const bIsPopular = popularBanks.includes(b.bin);
                    
                    if (aIsPopular && !bIsPopular) return -1;
                    if (!aIsPopular && bIsPopular) return 1;
                    if (aIsPopular && bIsPopular) {
                        return popularBanks.indexOf(a.bin) - popularBanks.indexOf(b.bin);
                    }
                    return a.short_name.localeCompare(b.short_name);
                });
                
                sortedBanks.forEach(bank => {
                    const option = document.createElement('option');
                    option.value = bank.short_name;
                    option.textContent = `${bank.short_name} - ${bank.name}`;
                    bankSelect.appendChild(option);
                });
                
            } else {
                throw new Error(result.desc || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng√¢n h√†ng');
            }
            
        } catch (error) {
            console.error('L·ªói t·∫£i danh s√°ch ng√¢n h√†ng:', error);
            
            bankSelect.innerHTML = `
                <option value="">-- Ch·ªçn ng√¢n h√†ng --</option>
                <option value="VCB">VCB - Vietcombank</option>
                <option value="TCB">TCB - Techcombank</option>
                <option value="BIDV">BIDV - Ng√¢n h√†ng BIDV</option>
                <option value="VTB">VTB - VietinBank</option>
                <option value="CTG">CTG - VPBank</option>
                <option value="MBB">MBB - MB Bank</option>
                <option value="ACB">ACB - √Å Ch√¢u Bank</option>
                <option value="TPB">TPB - TPBank</option>
                <option value="STB">STB - Sacombank</option>
                <option value="HDB">HDB - HDBank</option>
            `;
            
        } finally {
            bankLoading.style.display = 'none';
        }
    }

    // ‚úÖ Update product info (s·ª≠a l·∫°i)
    function updateProductInfo() {
        const selectedOption = productSelect.selectedOptions[0];
        if (!selectedOption) return;
        
        currentProductPrice = parseFloat(selectedOption.dataset.productPrice || 0);
        currentPotPrice = parseFloat(selectedOption.dataset.potPrice || 0);
        maxPlantQuantity = parseInt(selectedOption.dataset.remainingPlant || 0); // ‚úÖ L·∫•y ri√™ng
        maxPotQuantity = parseInt(selectedOption.dataset.remainingPot || 0);     // ‚úÖ L·∫•y ri√™ng
        hasPot = selectedOption.dataset.hasPot === 'true';
        
        plantUnitPrice.textContent = currentProductPrice.toLocaleString('vi-VN') + 'ƒë';
        potUnitPrice.textContent = currentPotPrice.toLocaleString('vi-VN') + 'ƒë';
        
        plantQuantityInput.max = maxPlantQuantity; // ‚úÖ Max ri√™ng bi·ªát
        potQuantityInput.max = maxPotQuantity;     // ‚úÖ Max ri√™ng bi·ªát
        
        if (!hasPot || maxPotQuantity === 0) {
            potSection.style.display = 'none';
            noPotAlert.style.display = 'block';
            onlyPotBtn.style.display = 'none';
            
            potCheck.checked = false;
            potCheck.disabled = true;
            potQuantityInput.value = 0;
            potQuantityInput.disabled = true;
        } else {
            potSection.style.display = 'block';
            noPotAlert.style.display = 'none';
            onlyPotBtn.style.display = 'inline-block';
            potCheck.disabled = false;
        }
        
        // ‚úÖ Disable c√°c option kh√¥ng c√≤n s·ªë l∆∞·ª£ng
        if (maxPlantQuantity === 0) {
            plantCheck.disabled = true;
            plantQuantityInput.disabled = true;
        } else {
            plantCheck.disabled = false;
        }
        
        plantCheck.checked = false;
        potCheck.checked = false;
        plantQuantityInput.value = 0;
        potQuantityInput.value = 0;
        plantQuantityInput.disabled = true;
        potQuantityInput.disabled = true;
        
        calculateTotalRefund();
    }

    // ‚úÖ ƒê∆†N GI·∫¢N H√ìA: Ch·ªâ c·∫ßn l·∫•y s·ªë l∆∞·ª£ng th·ª±c t·∫ø ng∆∞·ªùi d√πng nh·∫≠p
    function calculateTotalRefund() {
        const plantQty = parseInt(plantQuantityInput.value || 0);
        const potQty = parseInt(potQuantityInput.value || 0);
        
        // ‚úÖ ƒê∆†N GI·∫¢N: C·∫≠p nh·∫≠t t·∫•t c·∫£ hidden inputs
        document.getElementById('plant-quantity-hidden').value = plantQty;
        document.getElementById('pot-quantity-hidden').value = potQty;
        totalQuantityInput.value = Math.max(plantQty, potQty); // ƒê·ªÉ validation backend
        
        const plantTotal = currentProductPrice * plantQty;
        const potTotal = currentPotPrice * potQty;
        const grandTotal = plantTotal + potTotal;
        
        plantTotalPrice.textContent = plantTotal.toLocaleString('vi-VN') + 'ƒë';
        potTotalPrice.textContent = potTotal.toLocaleString('vi-VN') + 'ƒë';
        totalRefundAmount.textContent = grandTotal.toLocaleString('vi-VN') + 'ƒë';
        
        const breakdownParts = [];
        if (plantQty > 0) {
            breakdownParts.push(`${plantQty} c√¢y √ó ${currentProductPrice.toLocaleString('vi-VN')}ƒë`);
        }
        if (potQty > 0) {
            breakdownParts.push(`${potQty} ch·∫≠u √ó ${currentPotPrice.toLocaleString('vi-VN')}ƒë`);
        }
        refundBreakdown.textContent = breakdownParts.join(' + ');
        
        const hasSelection = plantQty > 0 || potQty > 0;
        submitBtn.disabled = !hasSelection;
        submitBtn.textContent = hasSelection ? 'G·ª≠i y√™u c·∫ßu' : 'Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 s·∫£n ph·∫©m';
    }

    // ‚úÖ Event handlers (gi·ªØ nguy√™n)
    plantCheck.addEventListener('change', function() {
        if (this.checked) {
            plantQuantityInput.disabled = false;
            plantQuantityInput.value = Math.min(1, maxPlantQuantity);
        } else {
            plantQuantityInput.disabled = true;
            plantQuantityInput.value = 0;
        }
        calculateTotalRefund();
    });

    potCheck.addEventListener('change', function() {
        if (this.checked) {
            potQuantityInput.disabled = false;
            potQuantityInput.value = Math.min(1, maxPotQuantity);
        } else {
            potQuantityInput.disabled = true;
            potQuantityInput.value = 0;
        }
        calculateTotalRefund();
    });

    // ‚úÖ TH√äM validation ƒë·ªìng b·ªô s·ªë l∆∞·ª£ng - B·ªé LOGIC ƒê·ªíNG B·ªò
    plantQuantityInput.addEventListener('input', function() {
        if (parseInt(this.value) > 0) {
            plantCheck.checked = true;
        } else {
            plantCheck.checked = false;
        }
        
        // ‚úÖ B·ªé ƒë·ªìng b·ªô s·ªë l∆∞·ª£ng - cho ph√©p kh√°c nhau
        calculateTotalRefund();
    });

    potQuantityInput.addEventListener('input', function() {
        if (parseInt(this.value) > 0) {
            potCheck.checked = true;
        } else {
            potCheck.checked = false;
        }
        
        // ‚úÖ B·ªé ƒë·ªìng b·ªô s·ªë l∆∞·ª£ng - cho ph√©p kh√°c nhau
        calculateTotalRefund();
    });

    // ‚úÖ Quick selection functions - S·ª¨A LOGIC ƒê√öNG
    window.selectAllItems = function() {
        // Tr·∫£ h·∫øt c√¢y c√≥ trong ƒë∆°n (n·∫øu c√≥)
        if (maxPlantQuantity > 0) {
            plantCheck.checked = true;
            plantQuantityInput.disabled = false;
            plantQuantityInput.value = maxPlantQuantity;
        }
        
        // Tr·∫£ h·∫øt ch·∫≠u c√≥ trong ƒë∆°n (n·∫øu c√≥)
        if (hasPot && maxPotQuantity > 0) {
            potCheck.checked = true;
            potQuantityInput.disabled = false;
            potQuantityInput.value = maxPotQuantity;
        }
        
        calculateTotalRefund();
    };

    window.selectOnlyPlant = function() {
        // Ch·ªâ tr·∫£ h·∫øt c√¢y
        if (maxPlantQuantity > 0) {
            plantCheck.checked = true;
            plantQuantityInput.disabled = false;
            plantQuantityInput.value = maxPlantQuantity;
        }
        
        // B·ªè ch·∫≠u
        potCheck.checked = false;
        potQuantityInput.disabled = true;
        potQuantityInput.value = 0;
        
        calculateTotalRefund();
    };

    window.selectOnlyPot = function() {
        if (!hasPot || maxPotQuantity === 0) return;
        
        // B·ªè c√¢y
        plantCheck.checked = false;
        plantQuantityInput.disabled = true;
        plantQuantityInput.value = 0;
        
        // Ch·ªâ tr·∫£ h·∫øt ch·∫≠u
        potCheck.checked = true;
        potQuantityInput.disabled = false;
        potQuantityInput.value = maxPotQuantity;
        
        calculateTotalRefund();
    };
    
    // ‚úÖ Validation (gi·ªØ nguy√™n c√°c ph·∫ßn c√≤n l·∫°i)
    reasonTextarea.addEventListener('input', function() {
        const remaining = 500 - this.value.length;
        reasonCount.textContent = remaining;
        reasonCount.className = remaining < 50 ? 'text-warning' : 'text-muted';
    });
    
    imagesInput.addEventListener('change', function() {
        const files = Array.from(this.files);
        const errors = [];
        
        if (files.length > 5) {
            errors.push('Ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa 5 ·∫£nh');
        }
        
        files.forEach((file, index) => {
            if (file.size > 5 * 1024 * 1024) {
                errors.push(`·∫¢nh ${index + 1} v∆∞·ª£t qu√° 5MB`);
            }
            
            if (!['image/jpeg', 'image/jpg', 'image/png', 'image/webp'].includes(file.type)) {
                errors.push(`·∫¢nh ${index + 1} kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng`);
            }
        });
        
        if (errors.length > 0) {
            alert('L·ªói upload ·∫£nh:\n' + errors.join('\n'));
            this.value = '';
        }
    });
    
    bankNumberInput.addEventListener('input', function() {
        this.value = this.value.replace(/[^0-9\s\-]/g, '');
        const cleanNumber = this.value.replace(/[\s\-]/g, '');
        
        if (cleanNumber.length < 8 && cleanNumber.length > 0) {
            this.setCustomValidity('S·ªë t√†i kho·∫£n ph·∫£i c√≥ √≠t nh·∫•t 8 ch·ªØ s·ªë');
        } else {
            this.setCustomValidity('');
        }
    });
    
    submitBtn.addEventListener('click', function(e) {
        const reason = reasonTextarea.value.trim();
        const bankName = bankSelect.value;
        const bankAccountName = document.querySelector('input[name="bank_account_name"]').value.trim();
        const bankNumber = bankNumberInput.value.trim();
        const agreeTerms = document.querySelector('#agree-terms').checked; // ‚úÖ TH√äM CHECK ƒêI·ªÄU KHO·∫¢N
        
        const totalQty = parseInt(totalQuantityInput.value || 0);
        const plantQty = parseInt(plantQuantityInput.value || 0);
        const potQty = parseInt(potQuantityInput.value || 0);
        
        // ‚úÖ TH√äM LOG DEBUG CHI TI·∫æT H√îN
        console.log('=== DEBUG FORM SUBMIT (FIXED) ===');
        console.log('üî¢ Total quantity (sent to backend):', totalQty);
        console.log('üå± Plant quantity (UI):', plantQty);
        console.log('ü™¥ Pot quantity (UI):', potQty);
        console.log('‚úÖ Return items checked:', [...document.querySelectorAll('input[name="return_items[]"]:checked')].map(el => el.value));
        console.log('üìä Max plant quantity available:', maxPlantQuantity);
        console.log('üìä Max pot quantity available:', maxPotQuantity);
        console.log('üîç Has pot:', hasPot);
        console.log('üí∞ Plant price:', currentProductPrice);
        console.log('üí∞ Pot price:', currentPotPrice);
        
        const errors = [];
        
        if (totalQty === 0) {
            errors.push('Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 s·∫£n ph·∫©m ƒë·ªÉ tr·∫£');
        }
        
        // ‚úÖ S·ª¨A VALIDATION: Ki·ªÉm tra t·ª´ng lo·∫°i ri√™ng bi·ªát, KH√îNG d√πng totalQty
        const returnItems = [...document.querySelectorAll('input[name="return_items[]"]:checked')].map(el => el.value);
        const wantPlant = returnItems.includes('plant');
        const wantPot = returnItems.includes('pot');
        
        // ‚úÖ LOGIC M·ªöI: Ki·ªÉm tra ri√™ng t·ª´ng lo·∫°i v·ªõi s·ªë l∆∞·ª£ng th·ª±c t·∫ø
        if (wantPlant && plantQty > 0) {
            if (plantQty > maxPlantQuantity) {
                errors.push(`S·ªë l∆∞·ª£ng c√¢y v∆∞·ª£t qu√° gi·ªõi h·∫°n. C√≥ th·ªÉ tr·∫£: ${maxPlantQuantity} c√¢y (b·∫°n ch·ªçn: ${plantQty})`);
            }
        }
        
        if (wantPot && potQty > 0) {
            if (potQty > maxPotQuantity) {
                errors.push(`S·ªë l∆∞·ª£ng ch·∫≠u v∆∞·ª£t qu√° gi·ªõi h·∫°n. C√≥ th·ªÉ tr·∫£: ${maxPotQuantity} ch·∫≠u (b·∫°n ch·ªçn: ${potQty})`);
            }
        }
        
        if (reason.length < 3) {
            errors.push('L√Ω do tr·∫£ h√†ng ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
        }
        
        if (!bankName) {
            errors.push('Vui l√≤ng ch·ªçn ng√¢n h√†ng');
        }
        
        if (bankAccountName.length < 3) {
            errors.push('T√™n ch·ªß t√†i kho·∫£n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
        }
        
        const cleanBankNumber = bankNumber.replace(/[\s\-]/g, '');
        if (cleanBankNumber.length < 8) {
            errors.push('S·ªë t√†i kho·∫£n ph·∫£i c√≥ √≠t nh·∫•t 8 ch·ªØ s·ªë');
        }
        
        // ‚úÖ TH√äM VALIDATION CHO ƒêI·ªÄU KHO·∫¢N
        if (!agreeTerms) {
            errors.push('B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n ƒë·ªïi tr·∫£ h√†ng ƒë·ªÉ ti·∫øp t·ª•c');
        }
        
        if (errors.length > 0) {
            e.preventDefault();
            console.error('‚ùå Form validation errors:', errors);
            alert('Vui l√≤ng ki·ªÉm tra l·∫°i:\n' + errors.join('\n'));
            return false;
        }
        
        console.log('‚úÖ Form h·ª£p l·ªá, ƒëang g·ª≠i y√™u c·∫ßu...');
        console.log('üì§ Final form data:');
        console.log('  - plant_quantity:', plantQty);
        console.log('  - pot_quantity:', potQty);
        console.log('  - quantity (max):', totalQty);
        // ‚úÖ Kh√¥ng prevent default ‚Üí cho ph√©p submit
    });
    
    // ‚úÖ TH√äM VALIDATION CHO SUBMIT BUTTON - C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI KHI CHECKBOX THAY ƒê·ªîI
    const agreeTermsCheckbox = document.querySelector('#agree-terms');
    
    function updateSubmitButtonState() {
        const hasSelection = parseInt(totalQuantityInput.value || 0) > 0;
        const agreeTerms = agreeTermsCheckbox.checked;
        const canSubmit = hasSelection && agreeTerms;
        
        submitBtn.disabled = !canSubmit;
        
        if (!hasSelection) {
            submitBtn.textContent = 'Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 s·∫£n ph·∫©m';
        } else if (!agreeTerms) {
            submitBtn.textContent = 'Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n';
        } else {
            submitBtn.textContent = 'G·ª≠i y√™u c·∫ßu';
        }
    }
    
    // ‚úÖ C·∫¨P NH·∫¨T H√ÄM calculateTotalRefund() ƒê·ªÇ G·ªåI updateSubmitButtonState()
    function calculateTotalRefund() {
        const plantQty = parseInt(plantQuantityInput.value || 0);
        const potQty = parseInt(potQuantityInput.value || 0);
        
        // ‚úÖ ƒê∆†N GI·∫¢N: C·∫≠p nh·∫≠t t·∫•t c·∫£ hidden inputs
        document.getElementById('plant-quantity-hidden').value = plantQty;
        document.getElementById('pot-quantity-hidden').value = potQty;
        totalQuantityInput.value = Math.max(plantQty, potQty); // ƒê·ªÉ validation backend
        
        const plantTotal = currentProductPrice * plantQty;
        const potTotal = currentPotPrice * potQty;
        const grandTotal = plantTotal + potTotal;
        
        plantTotalPrice.textContent = plantTotal.toLocaleString('vi-VN') + 'ƒë';
        potTotalPrice.textContent = potTotal.toLocaleString('vi-VN') + 'ƒë';
        totalRefundAmount.textContent = grandTotal.toLocaleString('vi-VN') + 'ƒë';
        
        const breakdownParts = [];
        if (plantQty > 0) {
            breakdownParts.push(`${plantQty} c√¢y √ó ${currentProductPrice.toLocaleString('vi-VN')}ƒë`);
        }
        if (potQty > 0) {
            breakdownParts.push(`${potQty} ch·∫≠u √ó ${currentPotPrice.toLocaleString('vi-VN')}ƒë`);
        }
        refundBreakdown.textContent = breakdownParts.join(' + ');
        
        updateSubmitButtonState(); // ‚úÖ THAY TH·∫æ LOGIC C≈®
    }
    
    // ‚úÖ TH√äM EVENT LISTENER CHO CHECKBOX ƒêI·ªÄU KHO·∫¢N
    agreeTermsCheckbox.addEventListener('change', updateSubmitButtonState);
    
    productSelect.addEventListener('change', updateProductInfo);
    
    document.querySelector('#returnModal').addEventListener('shown.bs.modal', function() {
        if (bankSelect.children.length <= 1) {
            loadBankList();
        }
    });
    
    updateProductInfo();
});
</script>